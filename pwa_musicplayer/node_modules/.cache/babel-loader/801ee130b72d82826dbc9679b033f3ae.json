{"ast":null,"code":"var _jsxFileName = \"F:\\\\rtavi\\\\VSCODEWorkspace\\\\htdocs\\\\htdocs\\\\Pwa-ReactApp\\\\pwa-myportfolio\\\\pwa-musicplayer\\\\pwa_musicplayer\\\\src\\\\AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudioControls\";\nimport Backdrop from \"./Backdrop\";\nimport \"./styles.css\";\n/*\n * Read the blog post here:\n * https://letsbuildui.dev/articles/building-an-audio-player-with-react-hooks\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = _ref => {\n  _s();\n\n  let {\n    tracks\n  } = _ref;\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false); // Destructure for conciseness\n\n  const {\n    title,\n    artist,\n    color,\n    image,\n    audioSrc\n  } = tracks[trackIndex]; // Refs\n\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false); // Destructure for conciseness\n\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${trackProgress / duration * 100}%` : \"0%\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]); // Handles cleanup and setup when changing tracks\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true;\n    }\n  }, [trackIndex]);\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"artwork\",\n        src: image,\n        alt: `track artwork for ${title} by ${artist}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"artist\",\n        children: artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevTrack,\n        onNextClick: toNextTrack,\n        onPlayPauseClick: setIsPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: trackProgress,\n        step: \"1\",\n        min: \"0\",\n        max: duration ? duration : `${duration}`,\n        className: \"progress\",\n        onChange: e => onScrub(e.target.value),\n        onMouseUp: onScrubEnd,\n        onKeyUp: onScrubEnd,\n        style: {\n          background: trackStyling\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      trackIndex: trackIndex,\n      activeColor: color,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"E9Pm1fLhcuO8D0WYi7gJIZx8ngQ=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["F:/rtavi/VSCODEWorkspace/htdocs/htdocs/Pwa-ReactApp/pwa-myportfolio/pwa-musicplayer/pwa_musicplayer/src/AudioPlayer.jsx"],"names":["React","useState","useEffect","useRef","AudioControls","Backdrop","AudioPlayer","tracks","trackIndex","setTrackIndex","trackProgress","setTrackProgress","isPlaying","setIsPlaying","title","artist","color","image","audioSrc","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","trackStyling","startTimer","clearInterval","setInterval","ended","toNextTrack","currentTime","onScrub","value","onScrubEnd","toPrevTrack","length","play","pause","e","target","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudioControls\";\nimport Backdrop from \"./Backdrop\";\nimport \"./styles.css\";\n\n/*\n * Read the blog post here:\n * https://letsbuildui.dev/articles/building-an-audio-player-with-react-hooks\n */\nconst AudioPlayer = ({ tracks }) => {\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Destructure for conciseness\n  const { title, artist, color, image, audioSrc } = tracks[trackIndex];\n\n  // Refs\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  // Destructure for conciseness\n  const { duration } = audioRef.current;\n\n  const currentPercentage = duration\n    ? `${(trackProgress / duration) * 100}%`\n    : \"0%\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n    startTimer();\n  };\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  // Handles cleanup and setup when changing tracks\n  useEffect(() => {\n    audioRef.current.pause();\n\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true;\n    }\n  }, [trackIndex]);\n\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"audio-player\">\n      <div className=\"track-info\">\n        <img\n          className=\"artwork\"\n          src={image}\n          alt={`track artwork for ${title} by ${artist}`}\n        />\n        <h2 className=\"title\">{title}</h2>\n        <h3 className=\"artist\">{artist}</h3>\n        <AudioControls\n          isPlaying={isPlaying}\n          onPrevClick={toPrevTrack}\n          onNextClick={toNextTrack}\n          onPlayPauseClick={setIsPlaying}\n        />\n        <input\n          type=\"range\"\n          value={trackProgress}\n          step=\"1\"\n          min=\"0\"\n          max={duration ? duration : `${duration}`}\n          className=\"progress\"\n          onChange={(e) => onScrub(e.target.value)}\n          onMouseUp={onScrubEnd}\n          onKeyUp={onScrubEnd}\n          style={{ background: trackStyling }}\n        />\n      </div>\n      <Backdrop\n        trackIndex={trackIndex}\n        activeColor={color}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}